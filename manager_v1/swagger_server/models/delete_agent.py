# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DeleteAgent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, host_ip: str=None, type: str='VM/CNT'):  # noqa: E501
        """DeleteAgent - a model defined in Swagger

        :param username: The username of this DeleteAgent.  # noqa: E501
        :type username: str
        :param host_ip: The host_ip of this DeleteAgent.  # noqa: E501
        :type host_ip: str
        :param type: The type of this DeleteAgent.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'username': str,
            'host_ip': str,
            'type': str
        }

        self.attribute_map = {
            'username': 'username',
            'host_ip': 'host ip',
            'type': 'type'
        }

        self._username = username
        self._host_ip = host_ip
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'DeleteAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The delete_agent of this DeleteAgent.  # noqa: E501
        :rtype: DeleteAgent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this DeleteAgent.

         username of monitored VM  # noqa: E501

        :return: The username of this DeleteAgent.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this DeleteAgent.

         username of monitored VM  # noqa: E501

        :param username: The username of this DeleteAgent.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def host_ip(self) -> str:
        """Gets the host_ip of this DeleteAgent.

        ip address of monitored VM  # noqa: E501

        :return: The host_ip of this DeleteAgent.
        :rtype: str
        """
        return self._host_ip

    @host_ip.setter
    def host_ip(self, host_ip: str):
        """Sets the host_ip of this DeleteAgent.

        ip address of monitored VM  # noqa: E501

        :param host_ip: The host_ip of this DeleteAgent.
        :type host_ip: str
        """
        if host_ip is None:
            raise ValueError("Invalid value for `host_ip`, must not be `None`")  # noqa: E501

        self._host_ip = host_ip

    @property
    def type(self) -> str:
        """Gets the type of this DeleteAgent.

        type of virtualisation container  # noqa: E501

        :return: The type of this DeleteAgent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this DeleteAgent.

        type of virtualisation container  # noqa: E501

        :param type: The type of this DeleteAgent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
