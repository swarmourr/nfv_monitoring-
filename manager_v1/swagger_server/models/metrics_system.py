# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MetricsSystem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mem: bool=True, cpu: bool=True):  # noqa: E501
        """MetricsSystem - a model defined in Swagger

        :param mem: The mem of this MetricsSystem.  # noqa: E501
        :type mem: bool
        :param cpu: The cpu of this MetricsSystem.  # noqa: E501
        :type cpu: bool
        """
        self.swagger_types = {
            'mem': bool,
            'cpu': bool
        }

        self.attribute_map = {
            'mem': 'mem',
            'cpu': 'cpu'
        }

        self._mem = mem
        self._cpu = cpu

    @classmethod
    def from_dict(cls, dikt) -> 'MetricsSystem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The metrics_system of this MetricsSystem.  # noqa: E501
        :rtype: MetricsSystem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mem(self) -> bool:
        """Gets the mem of this MetricsSystem.

        monitoring RAM consumption  # noqa: E501

        :return: The mem of this MetricsSystem.
        :rtype: bool
        """
        return self._mem

    @mem.setter
    def mem(self, mem: bool):
        """Sets the mem of this MetricsSystem.

        monitoring RAM consumption  # noqa: E501

        :param mem: The mem of this MetricsSystem.
        :type mem: bool
        """
        if mem is None:
            raise ValueError("Invalid value for `mem`, must not be `None`")  # noqa: E501

        self._mem = mem

    @property
    def cpu(self) -> bool:
        """Gets the cpu of this MetricsSystem.

        monitoring CPU consumption  # noqa: E501

        :return: The cpu of this MetricsSystem.
        :rtype: bool
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu: bool):
        """Sets the cpu of this MetricsSystem.

        monitoring CPU consumption  # noqa: E501

        :param cpu: The cpu of this MetricsSystem.
        :type cpu: bool
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")  # noqa: E501

        self._cpu = cpu
