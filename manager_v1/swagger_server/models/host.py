# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Host(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, host_port: str='8080', sensor_ip: str=None, host_ip: str=None, password: str='', type: str='osgi', sensor_port: str='5000'):  # noqa: E501
        """Host - a model defined in Swagger

        :param username: The username of this Host.  # noqa: E501
        :type username: str
        :param host_port: The host_port of this Host.  # noqa: E501
        :type host_port: str
        :param sensor_ip: The sensor_ip of this Host.  # noqa: E501
        :type sensor_ip: str
        :param host_ip: The host_ip of this Host.  # noqa: E501
        :type host_ip: str
        :param password: The password of this Host.  # noqa: E501
        :type password: str
        :param type: The type of this Host.  # noqa: E501
        :type type: str
        :param sensor_port: The sensor_port of this Host.  # noqa: E501
        :type sensor_port: str
        """
        self.swagger_types = {
            'username': str,
            'host_port': str,
            'sensor_ip': str,
            'host_ip': str,
            'password': str,
            'type': str,
            'sensor_port': str
        }

        self.attribute_map = {
            'username': 'username',
            'host_port': 'host port',
            'sensor_ip': 'sensor ip',
            'host_ip': 'host ip',
            'password': 'password',
            'type': 'type',
            'sensor_port': 'sensor port'
        }

        self._username = username
        self._host_port = host_port
        self._sensor_ip = sensor_ip
        self._host_ip = host_ip
        self._password = password
        self._type = type
        self._sensor_port = sensor_port

    @classmethod
    def from_dict(cls, dikt) -> 'Host':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The host of this Host.  # noqa: E501
        :rtype: Host
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this Host.

        web console username  # noqa: E501

        :return: The username of this Host.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Host.

        web console username  # noqa: E501

        :param username: The username of this Host.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def host_port(self) -> str:
        """Gets the host_port of this Host.

         agent port  # noqa: E501

        :return: The host_port of this Host.
        :rtype: str
        """
        return self._host_port

    @host_port.setter
    def host_port(self, host_port: str):
        """Sets the host_port of this Host.

         agent port  # noqa: E501

        :param host_port: The host_port of this Host.
        :type host_port: str
        """
        if host_port is None:
            raise ValueError("Invalid value for `host_port`, must not be `None`")  # noqa: E501

        self._host_port = host_port

    @property
    def sensor_ip(self) -> str:
        """Gets the sensor_ip of this Host.

        ip address of monitoring manager  # noqa: E501

        :return: The sensor_ip of this Host.
        :rtype: str
        """
        return self._sensor_ip

    @sensor_ip.setter
    def sensor_ip(self, sensor_ip: str):
        """Sets the sensor_ip of this Host.

        ip address of monitoring manager  # noqa: E501

        :param sensor_ip: The sensor_ip of this Host.
        :type sensor_ip: str
        """
        if sensor_ip is None:
            raise ValueError("Invalid value for `sensor_ip`, must not be `None`")  # noqa: E501

        self._sensor_ip = sensor_ip

    @property
    def host_ip(self) -> str:
        """Gets the host_ip of this Host.

        ip address of monitored VM  # noqa: E501

        :return: The host_ip of this Host.
        :rtype: str
        """
        return self._host_ip

    @host_ip.setter
    def host_ip(self, host_ip: str):
        """Sets the host_ip of this Host.

        ip address of monitored VM  # noqa: E501

        :param host_ip: The host_ip of this Host.
        :type host_ip: str
        """
        if host_ip is None:
            raise ValueError("Invalid value for `host_ip`, must not be `None`")  # noqa: E501

        self._host_ip = host_ip

    @property
    def password(self) -> str:
        """Gets the password of this Host.

        password to connect the host or use public key  # noqa: E501

        :return: The password of this Host.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Host.

        password to connect the host or use public key  # noqa: E501

        :param password: The password of this Host.
        :type password: str
        """

        self._password = password

    @property
    def type(self) -> str:
        """Gets the type of this Host.

        OSGI  # noqa: E501

        :return: The type of this Host.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Host.

        OSGI  # noqa: E501

        :param type: The type of this Host.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def sensor_port(self) -> str:
        """Gets the sensor_port of this Host.

        monitoring manager port  # noqa: E501

        :return: The sensor_port of this Host.
        :rtype: str
        """
        return self._sensor_port

    @sensor_port.setter
    def sensor_port(self, sensor_port: str):
        """Sets the sensor_port of this Host.

        monitoring manager port  # noqa: E501

        :param sensor_port: The sensor_port of this Host.
        :type sensor_port: str
        """
        if sensor_port is None:
            raise ValueError("Invalid value for `sensor_port`, must not be `None`")  # noqa: E501

        self._sensor_port = sensor_port
