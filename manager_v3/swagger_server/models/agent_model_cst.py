# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AgentModelCst(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, host_port: str='5000', agent_path: str=None, refresh_period: int=None, host_ip: str=None, password: str='', type: str='VM'):  # noqa: E501
        """AgentModelCst - a model defined in Swagger

        :param username: The username of this AgentModelCst.  # noqa: E501
        :type username: str
        :param host_port: The host_port of this AgentModelCst.  # noqa: E501
        :type host_port: str
        :param agent_path: The agent_path of this AgentModelCst.  # noqa: E501
        :type agent_path: str
        :param refresh_period: The refresh_period of this AgentModelCst.  # noqa: E501
        :type refresh_period: int
        :param host_ip: The host_ip of this AgentModelCst.  # noqa: E501
        :type host_ip: str
        :param password: The password of this AgentModelCst.  # noqa: E501
        :type password: str
        :param type: The type of this AgentModelCst.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'username': str,
            'host_port': str,
            'agent_path': str,
            'refresh_period': int,
            'host_ip': str,
            'password': str,
            'type': str
        }

        self.attribute_map = {
            'username': 'username',
            'host_port': 'host port',
            'agent_path': 'agent path',
            'refresh_period': 'refresh_period',
            'host_ip': 'host ip',
            'password': 'password',
            'type': 'type'
        }

        self._username = username
        self._host_port = host_port
        self._agent_path = agent_path
        self._refresh_period = refresh_period
        self._host_ip = host_ip
        self._password = password
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'AgentModelCst':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The agent_model_cst of this AgentModelCst.  # noqa: E501
        :rtype: AgentModelCst
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this AgentModelCst.

        ssh username  # noqa: E501

        :return: The username of this AgentModelCst.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this AgentModelCst.

        ssh username  # noqa: E501

        :param username: The username of this AgentModelCst.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def host_port(self) -> str:
        """Gets the host_port of this AgentModelCst.

         agent port  # noqa: E501

        :return: The host_port of this AgentModelCst.
        :rtype: str
        """
        return self._host_port

    @host_port.setter
    def host_port(self, host_port: str):
        """Sets the host_port of this AgentModelCst.

         agent port  # noqa: E501

        :param host_port: The host_port of this AgentModelCst.
        :type host_port: str
        """
        if host_port is None:
            raise ValueError("Invalid value for `host_port`, must not be `None`")  # noqa: E501

        self._host_port = host_port

    @property
    def agent_path(self) -> str:
        """Gets the agent_path of this AgentModelCst.

        Absolute path to agent  # noqa: E501

        :return: The agent_path of this AgentModelCst.
        :rtype: str
        """
        return self._agent_path

    @agent_path.setter
    def agent_path(self, agent_path: str):
        """Sets the agent_path of this AgentModelCst.

        Absolute path to agent  # noqa: E501

        :param agent_path: The agent_path of this AgentModelCst.
        :type agent_path: str
        """
        if agent_path is None:
            raise ValueError("Invalid value for `agent_path`, must not be `None`")  # noqa: E501

        self._agent_path = agent_path

    @property
    def refresh_period(self) -> int:
        """Gets the refresh_period of this AgentModelCst.

        period of time to collect data  # noqa: E501

        :return: The refresh_period of this AgentModelCst.
        :rtype: int
        """
        return self._refresh_period

    @refresh_period.setter
    def refresh_period(self, refresh_period: int):
        """Sets the refresh_period of this AgentModelCst.

        period of time to collect data  # noqa: E501

        :param refresh_period: The refresh_period of this AgentModelCst.
        :type refresh_period: int
        """

        self._refresh_period = refresh_period

    @property
    def host_ip(self) -> str:
        """Gets the host_ip of this AgentModelCst.

        ip address of monitored VM  # noqa: E501

        :return: The host_ip of this AgentModelCst.
        :rtype: str
        """
        return self._host_ip

    @host_ip.setter
    def host_ip(self, host_ip: str):
        """Sets the host_ip of this AgentModelCst.

        ip address of monitored VM  # noqa: E501

        :param host_ip: The host_ip of this AgentModelCst.
        :type host_ip: str
        """
        if host_ip is None:
            raise ValueError("Invalid value for `host_ip`, must not be `None`")  # noqa: E501

        self._host_ip = host_ip

    @property
    def password(self) -> str:
        """Gets the password of this AgentModelCst.

        password to connect the host or use public key  # noqa: E501

        :return: The password of this AgentModelCst.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this AgentModelCst.

        password to connect the host or use public key  # noqa: E501

        :param password: The password of this AgentModelCst.
        :type password: str
        """

        self._password = password

    @property
    def type(self) -> str:
        """Gets the type of this AgentModelCst.

         host type VM/CNT  # noqa: E501

        :return: The type of this AgentModelCst.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AgentModelCst.

         host type VM/CNT  # noqa: E501

        :param type: The type of this AgentModelCst.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
