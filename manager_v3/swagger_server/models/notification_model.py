# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NotificatinModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, CPU: str=None, type: str='VM/CNT' ,RAM: str='',id: str=''):  # noqa: E501
        """NotificatinModel - a model defined in Swagger

        :param ip: The ip of this NotificatinModel.  # noqa: E501
        :type ip: str
        :param CPU: The CPU of this NotificatinModel.  # noqa: E501
        :type CPU: str
        :param type: The type of this NotificatinModel.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'ip': str,
            'CPU': str,
            'type': str,
            'RAM' :str,
            'id': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'CPU': 'CPU',
            'type': 'type',
            'RAM' : 'RAM',
            'id': 'id' 
        }

        self._ip = ip
        self._CPU = CPU
        self._type = type
        self._RAM = RAM
        self._id = id
        

    @classmethod
    def from_dict(cls, dikt) -> 'NotificatinModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The notification_model of this NotificatinModel.  # noqa: E501
        :rtype: NotificatinModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this NotificatinModel.

         ip of monitored VM  # noqa: E501

        :return: The ip of this NotificatinModel.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this NotificatinModel.

         ip of monitored VM  # noqa: E501

        :param ip: The ip of this NotificatinModel.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def CPU(self) -> str:
        """Gets the CPU of this NotificatinModel.

        ip address of monitored VM  # noqa: E501

        :return: The CPU of this NotificatinModel.
        :rtype: str
        """
        return self._CPU

    @CPU.setter
    def CPU(self, CPU: str):
        """Sets the CPU of this NotificatinModel.

        ip address of monitored VM  # noqa: E501

        :param CPU: The CPU of this NotificatinModel.
        :type CPU: str
        """
        if CPU is None:
            raise ValueError("Invalid value for `CPU`, must not be `None`")  # noqa: E501

        self._CPU = CPU

    @property
    def type(self) -> str:
        """Gets the type of this NotificatinModel.

        type of virtualisation container  # noqa: E501

        :return: The type of this NotificatinModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this NotificatinModel.

        type of virtualisation container  # noqa: E501

        :param type: The type of this NotificatinModel.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
    
    @property
    def RAM(self) -> str:
        """Gets the RAM of this OsgiHost.

        RAM to connect the host or use public key  # noqa: E501

        :return: The RAM of this OsgiHost.
        :rtype: str
        """
        return self._RAM

    @RAM.setter
    def RAM(self, RAM: str):
        """Sets the RAM of this OsgiHost.

        RAM to connect the host or use public key  # noqa: E501

        :param RAM: The RAM of this OsgiHost.
        :type RAM: str
        """

        self._RAM = RAM
    
    @property
    def id(self) -> str:
        """Gets the RAM of this OsgiHost.

        id to connect the host or use public key  # noqa: E501

        :return: The id of this OsgiHost.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this OsgiHost.

        id to connect the host or use public key  # noqa: E501

        :param id: The id of this OsgiHost.
        :type id: str
        """

        self._id = id
