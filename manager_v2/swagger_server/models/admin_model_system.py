# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdminModelSystem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, access_host: object=None, metrics: object=None, agent_contrainte: object=None, agent: object=None, database: object=None):  # noqa: E501
        """AdminModelSystem - a model defined in Swagger

        :param access_host: The access_host of this AdminModelSystem.  # noqa: E501
        :type access_host: object
        :param metrics: The metrics of this AdminModelSystem.  # noqa: E501
        :type metrics: object
        :param agent_contrainte: The agent_contrainte of this AdminModelSystem.  # noqa: E501
        :type agent_contrainte: object
        :param agent: The agent of this AdminModelSystem.  # noqa: E501
        :type agent: object
        :param database: The database of this AdminModelSystem.  # noqa: E501
        :type database: object
        """
        self.swagger_types = {
            'access_host': object,
            'metrics': object,
            'agent_contrainte': object,
            'agent': object,
            'database': object
        }

        self.attribute_map = {
            'access_host': 'access_host',
            'metrics': 'metrics',
            'agent_contrainte': 'agent contrainte',
            'agent': 'agent',
            'database': 'database'
        }

        self._access_host = access_host
        self._metrics = metrics
        self._agent_contrainte = agent_contrainte
        self._agent = agent
        self._database = database

    @classmethod
    def from_dict(cls, dikt) -> 'AdminModelSystem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The admin_model_system of this AdminModelSystem.  # noqa: E501
        :rtype: AdminModelSystem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_host(self) -> object:
        """Gets the access_host of this AdminModelSystem.

        required informations to access  host   # noqa: E501

        :return: The access_host of this AdminModelSystem.
        :rtype: object
        """
        return self._access_host

    @access_host.setter
    def access_host(self, access_host: object):
        """Sets the access_host of this AdminModelSystem.

        required informations to access  host   # noqa: E501

        :param access_host: The access_host of this AdminModelSystem.
        :type access_host: object
        """

        self._access_host = access_host

    @property
    def metrics(self) -> object:
        """Gets the metrics of this AdminModelSystem.

        required metrics to custom agent   # noqa: E501

        :return: The metrics of this AdminModelSystem.
        :rtype: object
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: object):
        """Sets the metrics of this AdminModelSystem.

        required metrics to custom agent   # noqa: E501

        :param metrics: The metrics of this AdminModelSystem.
        :type metrics: object
        """

        self._metrics = metrics

    @property
    def agent_contrainte(self) -> object:
        """Gets the agent_contrainte of this AdminModelSystem.

        required metrics to custom agent   # noqa: E501

        :return: The agent_contrainte of this AdminModelSystem.
        :rtype: object
        """
        return self._agent_contrainte

    @agent_contrainte.setter
    def agent_contrainte(self, agent_contrainte: object):
        """Sets the agent_contrainte of this AdminModelSystem.

        required metrics to custom agent   # noqa: E501

        :param agent_contrainte: The agent_contrainte of this AdminModelSystem.
        :type agent_contrainte: object
        """

        self._agent_contrainte = agent_contrainte

    @property
    def agent(self) -> object:
        """Gets the agent of this AdminModelSystem.

         required informations to deploy agent  # noqa: E501

        :return: The agent of this AdminModelSystem.
        :rtype: object
        """
        return self._agent

    @agent.setter
    def agent(self, agent: object):
        """Sets the agent of this AdminModelSystem.

         required informations to deploy agent  # noqa: E501

        :param agent: The agent of this AdminModelSystem.
        :type agent: object
        """

        self._agent = agent

    @property
    def database(self) -> object:
        """Gets the database of this AdminModelSystem.

        required informations for data storing    # noqa: E501

        :return: The database of this AdminModelSystem.
        :rtype: object
        """
        return self._database

    @database.setter
    def database(self, database: object):
        """Sets the database of this AdminModelSystem.

        required informations for data storing    # noqa: E501

        :param database: The database of this AdminModelSystem.
        :type database: object
        """

        self._database = database
